import 'package:share_plus/share_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:ui' as ui;
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:cooking_app/models/recipe_model.dart';

class RecipeDetailPage extends StatelessWidget {
  final Recipe recipe;

  const RecipeDetailPage({super.key, required this.recipe});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(recipe.name),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Display recipe image
              recipe.imageURL.isNotEmpty
                  ? Image.file(
                      File(recipe.imageURL),
                      width: double.infinity,
                      height: 200,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return const Icon(Icons.image, size: 200); // Fallback icon
                      },
                    )
                  : const Icon(Icons.image, size: 200),

              const SizedBox(height: 16.0),

              // Display recipe name
              Text(
                recipe.name,
              ),

              const SizedBox(height: 8.0),

              // Display recipe description
              Text(
                recipe.description,
              ),

              const SizedBox(height: 16.0),

              // Display ingredients
              Text(
                'Ingredients',
              ),
              ...recipe.ingredients.map((ingredient) => Text('- $ingredient')).toList(),

              const SizedBox(height: 16.0),

              // Display steps
              Text(
                'Steps',
              ),
              ...recipe.steps.map((step) => Text('${recipe.steps.indexOf(step) + 1}. $step')).toList(),
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final ui.Image image = await createRecipeImage(
            recipe.name,
            recipe.description,
            recipe.ingredients,
            recipe.steps,
          );
          final File imageFile = await saveImageToFile(image);
          shareImage(imageFile);
        },
        child: const Icon(Icons.share),
      ),
    );
  }

  Future<ui.Image> createRecipeImage(String recipeName, String description, List<String> ingredients, List<String> steps) async {
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(recorder, Rect.fromPoints(Offset(0, 0), Offset(400, 600)));
    final paint = Paint()..color = Colors.white;

    canvas.drawRect(Rect.fromLTWH(0, 0, 400, 600), paint);

    final textPainter = TextPainter(
      textAlign: TextAlign.left,
      textDirection: TextDirection.ltr,
    );

    textPainter.text = TextSpan(
      text: recipeName,
      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black),
    );
    textPainter.layout(maxWidth: 380);
    textPainter.paint(canvas, Offset(10, 10));

    textPainter.text = TextSpan(
      text: description,
      style: TextStyle(fontSize: 16, color: Colors.black),
    );
    textPainter.layout(maxWidth: 380);
    textPainter.paint(canvas, Offset(10, 50));

    double offsetY = 100;

    textPainter.text = TextSpan(
      text: 'Ingredients:',
      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
    );
    textPainter.layout(maxWidth: 380);
    textPainter.paint(canvas, Offset(10, offsetY));

    offsetY += 30;

    for (var ingredient in ingredients) {
      textPainter.text = TextSpan(
        text: '- $ingredient\n',
        style: TextStyle(fontSize: 16, color: Colors.black),
      );
      textPainter.layout(maxWidth: 380);
      textPainter.paint(canvas, Offset(10, offsetY));
      offsetY += textPainter.height + 5;
    }

    offsetY += 20;

    textPainter.text = TextSpan(
      text: 'Steps:',
      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
    );
    textPainter.layout(maxWidth: 380);
    textPainter.paint(canvas, Offset(10, offsetY));

    offsetY += 30;

    for (var step in steps) {
      textPainter.text = TextSpan(
        text: '${steps.indexOf(step) + 1}. $step\n',
        style: TextStyle(fontSize: 16, color: Colors.black),
      );
      textPainter.layout(maxWidth: 380);
      textPainter.paint(canvas, Offset(10, offsetY));
      offsetY += textPainter.height + 5;
    }

    final picture = recorder.endRecording();
    final img = await picture.toImage(400, 600);
    return img;
  }

  Future<File> saveImageToFile(ui.Image image) async {
    final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
    final buffer = byteData!.buffer.asUint8List();

    final directory = await getApplicationDocumentsDirectory();
    final filePath = '${directory.path}/recipe_image.png';
    final file = File(filePath);

    await file.writeAsBytes(buffer);
    return file;
  }

  void shareImage(File imageFile) {
    final XFile xFile = XFile(imageFile.path);
    Share.shareXFiles([xFile], text: 'Check out this recipe!');
  }
}
